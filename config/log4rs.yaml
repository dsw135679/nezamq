appenders:
  # 定义一个名为stdout的appender
  stdout:
    kind: console

  # 定义一个名为server的appender，功能是将日志输出到名为server.log的滚动文件
  # 每个文件大小 1gb，文件序号从 0 开始到 50
  # 日志的格式为"{d(%Y-%m-%d %H:%M:%S)} {h({l}) {m}{n}}"
  # 日志格式参考这个文档: https://docs.rs/log4rs/1.3.0/log4rs/encode/pattern/index.html
  server:
    kind: rolling_file
    path: "{$path}/server.log"
    encoder:
      pattern: "{d(%Y-%m-%d %H:%M:%S)} {h({l}) {m}{n}}"
    policy:
      trigger:
        kind: size
        limit: 1 gb
      roller:
        kind: fixed_window
        pattern: "{$path}/server-{}.log"
        base: 0
        count: 50

  requests:
    kind: rolling_file
    path: "{$path}/requests-log.log"
    encoder:
      pattern: "{d(%Y-%m-%d %H:%M:%S)} {h({l}) {m}{n}}"
    policy:
      trigger:
        kind: size
        limit: 1 gb
      roller:
        kind: fixed_window
        pattern: "{$path}/requests-log-{}.log"
        base: 0
        count: 50

# 默认情况下，所有的日志都输出到stdout 和 server 两个 appender
root:
  level: info
  appenders:
    - stdout
    - server

# 这个需要重点注意，可以将不同的lib 或 mod 中的日志输出到不同的文件
loggers:
  # 将 placement_center::server模块的日志会写入到 stdout 和 server 两个 appender
  placement_center::server:
    level: info
    appenders:
      - stdout
      - server
    additive: false
  # 将 placement_center::requests 模块的日志会写入到 stdout 和 requests 两个 appender
  placement_center::requests:
    level: info
    appenders:
      - stdout
      - requests
    additive: false
