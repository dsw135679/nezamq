use std::io::Cursor;

// 游标（Cursor）是一种数据结构，用于在内存缓冲区中追踪当前操作的位置。
// 当需要多次修改或查询数据时，可以先将数据加载到内存缓冲区，通过游标高效定位和操作，最后一次性写入磁盘。
// 游标通常包含一个索引，用于指示当前操作的位置。
// 游标可以向前移动，读取数据，也可以向后移动，写入数据。
// 游标可以用于实现数据的随机访问，例如在文件系统中定位文件的位置。
// 游标可以与其他数据结构（如数组、链表等）结合使用，提供更灵活的数据操作方式。
// 游标在处理大量数据时具有较高的效率，因为它避免了频繁的磁盘读写操作。
// 游标在 Rust 标准库中提供了 Cursor 类型，可以用于创建游标对象。
// 游标在处理二进制数据时非常有用，例如在网络传输、文件读写等场景中。
// 游标是 Rust 标准库中一个非常有用的数据结构，它可以帮助我们高效地处理数据。
// 注意：
// 内存缓冲区不适合处理超大数据（可能导致内存溢出），此时仍需分块读写真实文件。
pub type SnapshotData=Cursor<Vec<u8>>;

openraft::declare_raft_types!(
    pub TypeConfig:
        D = AppRequestData,
        R = AppResponseData,
        Node = Node,
);