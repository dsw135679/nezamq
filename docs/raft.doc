Raft 协议

1. Raft 原理
    Raft 是通过日志来复制状态机，也就是说我们能保证所有机器上的日志顺序是一致的，那么按顺序执行所有日志后，则每个节点上的状态机就能达到一致的状态。

2. Raft 模块
    一个完整的Raft模型包含：共识模块、Log、状态机、传输层。
    共识模块：是指Raft核心共识算法部分，它负责完成选举、选举过程、心跳保持、检测心跳超时、重新发起选举等工作，也就是Raft的算法部分。
这部分由Raft-rs库完成。
    状态机：是指驱动Raft共识模块工作的线程。它会不断检测共识模块是否需要执行某些操作，比如选举、心跳。
如果需要就根据共识模块的运行结果执行对应的操作。
    Log（存储层）：是指存储Raft状态机运行过程中产生的Log（也叫做Entry）的模块，比如选举出一个新的Leader，就会生成一个新的Entry需要持久化存储。
    传输层：是指用于多个Raft节点之间通信的网络层。

3. 开发工作
    构建存储层：即实现用于持久化存储Raft Log数据的存储层。基于RocksDB来实现的。
    构建网络层：即实现用于在多个Raft节点之间进行通信的模块。基于gRPC来实现的。
    构建单节点Raft状态机：比如分发数据、检测心跳、切换Leader等等。
    整合状态机、存储层、网络层：构建一个完整的Raft集群。

4. 构建存储层
    Raft Log本质上是一系列Entry组成的顺序存储的日志。Entry表示一个Raft Log，为了节省存储空间和加快快照的生成速度，
一些没用的Raft Log需要清理删除。所以First Entry是指至今还保存的最早的那条Entry，Last Entry是指最新的那条Entry。
快照一般指当前所有有效的Entry的集合。
    Raft Log 核心其实是 Entry。每一个 Entry 由 Entry Type、Index、Term、Data四部分组成。
    Entry Type: 表示该 Entry 包含什么类型的数据。
    Index：指这个Entry在顺序存储中的偏移量。
    Term: 是 Raft 协议中的概念，用于保证 Raft Log 的一致性和顺序性。Term 从0开始，如果 Leader 切换一次，Term 就会 +1，每一个 Enter 都有属于自己的 Term。
    Data：是 Raft Log 的具体内容，不同的 Entry Type 的内容是不一样。
    Snapshot：Raft Log 的快照数据。快照数据主要包含当前还保留的所有 Entry 信息。快照是用于当 Follower 数据落后 Leader 太多时，帮助 Follower 恢复到最新数据状态的工具。
需要注意的是：因为快照数据一般很大，所以一般需要异步生成，如果同步生成，会卡住主线程的运行。
